name: Lint / Init / Plan / Apply On Push

on:
  push:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9

      - name: Run terraform fmt check
        run: terraform fmt -check # -diff -recursive ./
        
        

#name: 'Terraform'
#on: [push, pull_request]
#env:
#TF_LOG: INFO
#jobs:
#terraform:
#name: 'Terraform'
#runs-on: ubuntu-latest
#environment: dev
# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#defaults:
#run:
#working-directory: ./
#shell: bash
#steps:
# Checkout the repository to the GitHub Actions runner
#- name: Checkout
#uses: actions/checkout@v2
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#- name: Setup Terraform
#uses: hashicorp/setup-terraform@v1
#with:
#cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#terraform_version: 1.0.4
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#- name: Terraform Init
#run: terraform init
# Checks that all Terraform configuration files adhere to a canonical format
# - name: Terraform Format
#  run: terraform fmt -check
# Generates an execution plan for Terraform
#- name: Terraform Plan
#run: terraform plan
# On push to main, build or change infrastructure according to Terraform configuration files
#- name: Terraform Apply
#if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#run: terraform apply -auto-approve